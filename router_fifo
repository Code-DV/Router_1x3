`timescale 1ns / 1ps
module router_fifo(clk,rst_n,we,sftrst,re,lfd_state,data_in,data_out,full,empty);
input clk,rst_n,we,sftrst,re,lfd_state;
input [7:0]data_in;
output reg [7:0]data_out;
output full,empty;
integer i;
reg [4:0]wp,rp;
reg [6:0]count;
reg [8:0]mem[15:0];
always@(posedge clk)
begin
if(!rst_n)
begin 
	wp<=0;
	for(i=0;i<16;i= i+1)
		mem[i]<=9'b0;
end
else if(sftrst)
begin
	for(i=0;i<16;i=i+1)
		mem[i]<=9'b0;
end
else if(we==1'b1&&full==1'b0)
begin
	mem[wp[3:0]]<={lfd_state,data_in};
	wp<=wp+1'b1;	
end
else
	mem[wp[3:0]]<=mem[wp[3:0]];

end
always@(posedge clk)
begin
if(!rst_n)
begin
	rp<=5'b0;
	data_out<=8'b0;
	end
else if(sftrst)
begin
	data_out<=8'bz;
	rp<=5'b0;
	end	
else if(re==1'b1&&empty==1'b0)
begin
	data_out<=mem[rp[3:0]][7:0];
	rp<=rp+1'b1;
end
else
	data_out<=data_out;
end
//count variable procedural block
wire [6:0] flag;
assign flag=(count==1'b0)? 1'b1:1'b0;
always@(posedge clk)
begin
if(!rst_n)
	count<=7'b0;
else if(re==1'b1&&empty==1'b0)
begin
	if(mem[rp[3:0]][8]==1'b1)
		count<=mem[rp[3:0]][7:2]+1'b1;
	else if(flag)
		count<=7'b0;
	else
		count<= count-1'b1;
	
end
end
assign full=((wp==5'd16)&&(rp==5'b0))? 1'b1:1'b0;
assign empty=(rp==wp)? 1'b1:1'b0;
endmodule

