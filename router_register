`timescale 1ns / 1ps

module router_register(input clock,
	               input reset_n,
	               input pkt_valid,
	               input [7:0]data_in,
	               input fifo_full,
	               input rst_int_reg,
	               input detect_add,
	               input ld_state,
	               input laf_state,
	               input full_state,
						input lfd_state,
	               output reg parity_done,
	               output reg low_pkt_valid,
	               output reg error,
	               output reg[7:0]dout);
		

	       ///internal register/////

	       reg [7:0]header;
	       reg [7:0]packet_parity;
	       reg [7:0]internal_parity;
	       reg [7:0]fifo_full_state;

	       /////////header logic/////////

		always@(posedge clock)
		begin
			if(!reset_n)
				header<=8'b0;
			else if(detect_add && pkt_valid && (data_in[1:0]!=2'd3))
				header<=data_in;
			else
				header<=header;
	end

		///////parity_done///////////////
		always@(posedge clock)
		begin
			if(!reset_n)
				parity_done<=1'b0;
			else if((ld_state && (!fifo_full) && (!pkt_valid))||(laf_state && low_pkt_valid && (!parity_done)))
				parity_done<=1'b1;
			else if(detect_add)
				parity_done<=1'b0;
			else
				parity_done<=1'b0;
		end

		//////////low_packet_valid/////////////////

	       always@(posedge clock)
	       begin
		       if(!reset_n)
			       low_pkt_valid<=1'b0;
		       else if(ld_state &&(!pkt_valid))
			       low_pkt_valid<=1'b1;
		       else if(rst_int_reg==1'b1)
			       low_pkt_valid<=1'b0;
				else
					low_pkt_valid<=1'b0;
	       end

	/////////packet parity///////////
		

		always@(posedge clock)
		begin
			if(!reset_n)
				packet_parity<=1'b0;
			else if(detect_add)
				packet_parity<=1'b0;
			else if(ld_state && (!pkt_valid))
				packet_parity<=data_in;
			else
				packet_parity<=packet_parity;
		end


		//////////internal parity/////////////
		

		always@(posedge clock)
		begin
			if(!reset_n)
				internal_parity<=1'b0;
			else if(detect_add)
				internal_parity<=1'b0;
			else if(lfd_state)
				internal_parity<=internal_parity^header;
			else if(pkt_valid && ld_state && (!full_state))
				internal_parity<=internal_parity^data_in;
			
		end


		////////////data_out /////////
		

		always@(posedge clock)
		begin
			if(!reset_n) 
			begin
				dout<=1'b0;
				fifo_full_state<=0;		
				end
			else if(lfd_state)
				dout<=header;
			else if(ld_state && (!fifo_full))
				dout<=data_in;
			else if(ld_state && fifo_full)
				fifo_full_state<=data_in;
			else if(laf_state)
				dout<=fifo_full_state;
			else
				dout<=dout;
		end

		//////////////error logic///////////
		always@(posedge clock)
		begin
			if(!reset_n)
				error<=1'b0;
			else if(!parity_done)
				error<=1'b0;
			else if(parity_done) 
			begin
				if(packet_parity!=internal_parity)
				error<=1'b1;
			else
				error<=1'b0;
				end
		end
		endmodule




