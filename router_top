module router_top(input clk,
		  input rstn,
	  	  input read_enb_0,read_enb_1,read_enb_2,
	  	  input [7:0]data_in,
	  	  input pkt_valid,
	  	  
	  	  output [7:0]data_out_0,data_out_1,data_out_2,
	  	  output  valid_out_0,valid_out_1,valid_out_2,
	  	  output error,
	  	  output busy);

	  //internal wires///
	  wire[2:0]write_enb;
	  wire[7:0]din;
	 
	router_fsm FSM(clk,rstn,pkt_valid,soft_rst_0,soft_rst_1,soft_rst_2,fifo_full,parity_done,low_pkt_valid,empty_0,empty_1,empty_2,
					data_in[1:0],busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);
					
	router_register REG(clk,rstn, pkt_valid,data_in,fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state,parity_done,low_pkt_valid,
	               error,din);
	
	router_synchronizer SYN(data_in[1:0],clk,rstn,detect_add,write_enb_reg,read_enb_0,read_enb_1,read_enb_2,empty_0,empty_1,empty_2,full_0,full_1,full_2,
					write_enb,fifo_full,soft_rst_0,soft_rst_1,soft_rst_2,valid_out_0,valid_out_1,valid_out_2);
					
	router_fifo FIFO_0(clk,rstn,write_enb[0],soft_rst_0,read_enb_0,lfd_state,din,data_out_0,full_0,empty_0);
	
	router_fifo FIFO_1(clk,rstn,write_enb[1],soft_rst_1,read_enb_1,lfd_state,din,data_out_1,full_1,empty_1);
	
	router_fifo FIFO_2(clk,rstn,write_enb[2],soft_rst_2,read_enb_2,lfd_state,din,data_out_2,full_2,empty_2);

endmodule

