`timescale 1ns / 1ps

module router_synchronizer(data_in,clk,rst_n,detect_add,we,read_enb_0,read_enb_1,read_enb_2,
empty_0,empty_1,empty_2,full_0,full_1,full_2,
write_enb,fifo_full,soft_rst_0,soft_rst_1,soft_rst_2,
vld_out_0,vld_out_1,vld_out_2);

input [1:0]data_in;
input clk,rst_n,detect_add,we,read_enb_0,read_enb_1,read_enb_2;
input empty_0,empty_1,empty_2,full_0,full_1,full_2;
output vld_out_0,vld_out_1,vld_out_2;
output reg soft_rst_0,soft_rst_1,soft_rst_2;
output reg fifo_full;
output reg [2:0]write_enb;
reg [1:0]add;
reg [4:0]count1,count2,count3;
wire flag1,flag2,flag3;

always@(posedge clk)
begin
	if(!rst_n)
		add<=2'bz;
	else if(detect_add)
		add<=data_in;
end
	
always@(*)
begin		
if(we) 
	begin
		case(add)
			2'b00:write_enb=3'b001;
			2'b01:write_enb=3'b010;
			2'b10:write_enb=3'b100;
		default:write_enb=3'b000;			
	endcase
	end
else
	write_enb=3'b000;
	
end

always@(*)
begin
	case(add)
	2'b00:fifo_full=full_0;
	2'b01:fifo_full=full_1;
	2'b10:fifo_full=full_2;
	default:fifo_full=0;
endcase
end

assign vld_out_0=(~empty_0);
assign vld_out_1=(~empty_1);
assign vld_out_2=(~empty_2);

//soft reset 0
always@(posedge clk)
begin
if(!rst_n)
begin
	 count1<=5'b0;
	 soft_rst_0<=1'b0;
end
else if(vld_out_0==1'b1)
begin
	if(read_enb_0==1'b1)begin
		count1<=5'b0;
		soft_rst_0<=1'b0;
	end
	else if(flag1)
		begin
		count1<=5'b0;
		soft_rst_0<=1'b1;
		end
		else
		count1<=count1+1'b1;
	end
else begin
	  count1<=5'b0;
	 soft_rst_0<=1'b0;
	 end
end
assign flag1 =(count1==5'd29) ?1'b1:1'b0;
//soft rest 1
always@(posedge clk)
begin
if(!rst_n)
begin
	 count2<=5'b0;
	 soft_rst_1<=1'b0;
end
else if(vld_out_1==1'b1)
begin
	if(read_enb_1==1'b1)begin
		count2<=5'b0;
		soft_rst_1<=1'b0;
	end
	else if(flag2)
	begin
		count2<=5'b0;
		soft_rst_1<=1'b1;
		end
	else
		count2<=count2+1'b1;
	end
else begin
	 count2<=5'b0;
	 soft_rst_1<=1'b0;
	 end
end
assign flag2=(count2==5'd29) ?1'b1:1'b0;
//soft reset 2
always@(posedge clk)
begin
if(!rst_n)
begin
	 count3<=5'b0;
	 soft_rst_2<=1'b0;
end
else if(vld_out_2==1'b1)
begin
	if(read_enb_2==1'b1)begin
		count3<=5'b0;
		soft_rst_2<=1'b0;
	end
	else if(flag3)
	begin
		count3<=5'b0;
		soft_rst_2<=1'b1;
		end
	else
		count3<=count3+1'b1;
end
else begin
	count3<=5'b0;
	 soft_rst_2<=1'b0;
end
end
assign flag3=(count3==5'd29)?1'b1:1'b0;
endmodule

